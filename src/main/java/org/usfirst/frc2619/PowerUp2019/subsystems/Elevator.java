// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2619.PowerUp2018.subsystems;

import org.usfirst.frc2619.PowerUp2018.Robot;
import org.usfirst.frc2619.PowerUp2018.RobotMap;
import org.usfirst.frc2619.PowerUp2018.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.GearTooth;
import edu.wpi.first.wpilibj.Solenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Elevator extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    private static final int NUMBER_OF_POSITIONS = 5;
    private static final double MOTOR_POW = 0.3;
    private static final double CURRENT_LIMIT = 40;
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_TalonSRX motor = RobotMap.elevatorMotor;
    private final GearTooth counter = RobotMap.elevatorCounter;
    private final WPI_TalonSRX followerMotor = RobotMap.elevatorFollowerMotor;
    private final Solenoid brakes = RobotMap.elevatorBrakes;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	private static int lastValue = 0;
	public static int pos;
	public boolean wasForward = true;
    

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void count() {
    	int diff = counter.get() - lastValue;
    	if (!isForward())
    		diff = -diff;
    	pos += diff;
    	SmartDashboard.putNumber("ElevatorPosition:", pos);
    	SmartDashboard.putNumber("DefaultCounter:", counter.get());
    	lastValue = counter.get();
    }
    
    public boolean canMove() {
    	return !Robot.shoulder.getIsHigh();
    }
    
    private void setPow(double pow) {
    	count();
    	currentLimiting();
    	motor.set(pow);
    }

    public void runMotorFwd() {
    	if(canMove()) {
	    	count();
	    	setPow(-MOTOR_POW);
	    	wasForward = true;
    	}
    }
    
    public void runMotorRev() {
    	if(canMove()) {
	    	count();
	    	setPow(MOTOR_POW);
	    	wasForward = false;
    	}
    }
    
    public void powToTarget(int target) {
    	if(canMove()) {
	    	count();
	    	if (target == 0) 
	    		runMotorRev();
	    	else if (pos >= target)
	    		runMotorRev();
	    	else 
	    		runMotorFwd();
    	}
    }
    
    public void currentLimiting() {
		motor.configContinuousCurrentLimit((int) CURRENT_LIMIT, RobotMap.TIMEOUT_MS);
		motor.enableCurrentLimit(true);
		followerMotor.configContinuousCurrentLimit((int) CURRENT_LIMIT, RobotMap.TIMEOUT_MS);
		followerMotor.enableCurrentLimit(true);
	}
    
    public void upToZero() {
    	if(canMove()) {
	    	setPow(-MOTOR_POW);
	    	wasForward = true;
    	}
    }

    private boolean isForward() {
    	return (motor.get() < 0);
    }
    
    public boolean isPastTarget(int target) {
    	count();
    	checkLimitSwitches();
    	if (target != 0) {
	    	if ((motor.get() == 0))
	    		return false;
	    	else if (isForward()) 
	    		return (pos >= target);
	    	else 
	    		return (pos <= target - 1);
    	}
    	return false;
    }
    
    public boolean checkLimitSwitches() {
    	if (motor.getSensorCollection().isFwdLimitSwitchClosed()) {
    		resetPosTop();
    		return true;
    	}
    	else if (motor.getSensorCollection().isRevLimitSwitchClosed()) {
    		resetPosBottom();
    		return true;
    	}
    	return false;
    }
    
    public void resetPosTop() {
    	pos = NUMBER_OF_POSITIONS;
    	counter.reset();
    	lastValue = 0;
    }
    
    public int getElevatorPos() {
    	return pos;
    }
    
    public void resetPosBottom() {
    	pos = 0;
    	counter.reset();
    	lastValue = 0;
    }
    
    public void brakeOn() {
    	brakes.set(false);
    }
    
    public void brakeOff() {
    	if(Robot.elevator.canMove()) {
    		brakes.set(true);
    	}
    }
    
    public void stop() {
    	brakeOn();
    	setPow(0);
    }
    
    //public void writeDashboardValues() {
    	//int x = 1;
    	//x = (int) SmartDashboard.getNumber("Elevator Position", 1);
    	//setElevatorPos(x);
    //}
    
    //public void setElevatorPos(int p) {
		//pos = p;
    //}
}

